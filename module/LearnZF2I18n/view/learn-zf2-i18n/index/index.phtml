<?php $currentLang = $this->layout()->lang; ?>
<div class="col-lg-9">
    <h1>I18n example with Zend Framework 2</h1>
    <div class="demo-box">
        <form method="get" id="changeLanguageForm" class="form-inline">
            <p class="text-right">
                <label for="languageElement"><?php echo $this->translate('Change current language') ?></label>
                <select id="languageElement" class="form-control" name="lang"
                        onchange="$('#changeLanguageForm').submit()">
                    <option <?php echo $currentLang === 'en_US' ? 'selected' : '' ?>>en_US</option>
                    <option <?php echo $currentLang === 'es_ES' ? 'selected' : '' ?>>es_ES</option>
                </select>
            </p>
        </form>
        <fieldset>
            <legend>Sentences in current language (<?php echo $currentLang ?>)</legend>
            <ul>
                <li><?php echo $this->translate('Hello') ?></li>
                <li><?php echo $this->translate('Learn Zend Framework with this tutorials') ?></li>
                <li><?php echo $this->translate('This string is fetched from a gettext file') ?></li>
                <li><?php echo $this->translate('Zend Framework 2 is a web framework written in PHP') ?></li>
            </ul>
        </fieldset>
        <br>
        <fieldset>
            <legend>Sentences always in English (en_US)</legend>
            <ul>
                <li><?php echo $this->translate('Hello', null, 'en_US') ?></li>
                <li><?php echo $this->translate('Learn Zend Framework with this tutorials', null, 'en_US') ?></li>
                <li><?php echo $this->translate('This string is fetched from a gettext file', null, 'en_US') ?></li>
                <li>
                    <?php echo $this->translate('Zend Framework 2 is a web framework written in PHP', null, 'en_US') ?>
                </li>
            </ul>
        </fieldset>
        <br>
        <fieldset>
            <legend>Sentences always in Spanish (es_ES)</legend>
            <ul>
                <li><?php echo $this->translate('Hello', null, 'es_ES') ?></li>
                <li><?php echo $this->translate('Learn Zend Framework with this tutorials', null, 'es_ES') ?></li>
                <li><?php echo $this->translate('This string is fetched from a gettext file', null, 'es_ES') ?></li>
                <li>
                    <?php echo $this->translate('Zend Framework 2 is a web framework written in PHP', null, 'es_ES') ?>
                </li>
            </ul>
        </fieldset>
    </div>

    <p>The <code>Zend\I18n</code> component is used to handle translations in Zend Framework 2 applications.</p>
    <p>It includes the Translator, which is the main service, but also a view helper that consumes it and can be used to translate texts directly inside views.</p>
    <p>The first thing we have to do is to define a <b>translator</b> top level configuration block, so that the Translator service can be properly created.</p>

    <pre><code class="language-php"><?php echo htmlentities("[
    'translator' => [
        'locale' => 'en_US',
        'translation_file_patterns' => [
            [
                'base_dir' => __DIR__ . '/../languages/phpArray',
                'type'     => 'phpArray',
                'pattern'  => '%s.php',
            ],
            [
                'base_dir' => __DIR__ . '/../languages/gettext',
                'type'     => 'gettext',
                'pattern'  => '%s.mo',
            ],
        ],
    ],
]")?></code></pre>

    <p>
        The <b>translator</b> configuration has two elements.
        <ul>
            <li>The <b>locale</b> is the default locale to be used when no other locale is provided.</li>
            <li>The <b>translation_file_patterns</b> is a list of places where translation files can be found. Each one of them as the directory path, the type of translation files that it contains and a file name pattern, where the mask will be replaced by the locale.</li>
        </ul>
    </p>
    <p>The Translator service can handle multiple language files in different formats. Usually you will define a group of language files per module, and each module will have its own <b>translator</b> configuration. At runtime all of them will be merged and you will have something like the example, with multiple <b>translation_file_patterns</b>.</p>

    <br>
    <h4>The service</h4>
    <p>The <code>Zend\Mvc</code> component registers a service with the key <b>MvcTranslator</b>, which is the one that consumes the <b>translator</b> top level configuration, but some other services will try to find a <b>translator</b> service.</p>
    <p>To fix this problem we have to define a service alias like this.</p>

    <pre><code class="language-php"><?php echo htmlentities("[
    'service_manager' => [
        'aliases' => [
            'translator' => 'mvctranslator',
        ],
    ]
]") ?></code></pre>
    <p>The <a target="_blank" href="https://github.com/zendframework/ZendSkeletonApplication">Zend Skeleton Application</a> has this preconfigured.</p>

    <br>
    <h4>The view helper</h4>
    <p>You will usually want to translate messages in view templates. That can be easily done by using the <code>translate()</code> view helper, which internally consumes the <b>translator</b> service.</p>
    <p>Inside a view partial, just call it by passing the message you want it to translate and optionally the text domain and locale.</p>

    <pre><code class="language-php"><?php echo htmlentities("<label><?php echo \$this->translate('Hello') ?></label>
<label><?php echo \$this->translate('Hello', null, 'en_US') ?></label>
") ?></code></pre>
    <p>And that's it, you are now ready to use <code>Zend\I18n</code>.</p>
</div>
